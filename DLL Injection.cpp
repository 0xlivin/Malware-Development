#include <Windows.h>
#include <iostream>
#include <string>

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <pid> <dll_name>" << std::endl;
        return 1;
    }

    DWORD pid = atoi(argv[1]);
    std::string dllName = argv[2];

    // Get a handle to the process we want to inject into
    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (hProcess == NULL) {
        std::cerr << "Failed to open process with pid " << pid << std::endl;
        return 1;
    }

    // Allocate an executable section of memory in the remote process
    LPVOID lpRemoteMem = VirtualAllocEx(hProcess, NULL, dllName.size() + 1, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if (lpRemoteMem == NULL) {
        std::cerr << "Failed to allocate memory in remote process" << std::endl;
        CloseHandle(hProcess);
        return 1;
    }

    // Write the name of our DLL to this area of memory
    SIZE_T bytesWritten;
    if (!WriteProcessMemory(hProcess, lpRemoteMem, dllName.c_str(), dllName.size() + 1, &bytesWritten)) {
        std::cerr << "Failed to write DLL name to remote process memory" << std::endl;
        VirtualFreeEx(hProcess, lpRemoteMem, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return 1;
    }

    // Get the address of the Kernel32 module
    HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");
    if (hKernel32 == NULL) {
        std::cerr << "Failed to get handle to kernel32.dll" << std::endl;
        VirtualFreeEx(hProcess, lpRemoteMem, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return 1;
    }

    // Get the address of LoadLibraryA
    FARPROC lpLoadLibraryA = GetProcAddress(hKernel32, "LoadLibraryA");
    if (lpLoadLibraryA == NULL) {
        std::cerr << "Failed to get address of LoadLibraryA" << std::endl;
        VirtualFreeEx(hProcess, lpRemoteMem, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return 1;
    }

    // Create a remote thread that calls LoadLibraryA with the DLL name
    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)lpLoadLibraryA, lpRemoteMem, 0, NULL);
    if (hThread == NULL) {
        std::cerr << "Failed to create remote thread" << std::endl;
        VirtualFreeEx(hProcess, lpRemoteMem, 0, MEM_RELEASE);
        CloseHandle(hProcess);
        return 1;
    }

    // Wait for the thread to finish
    WaitForSingleObject(hThread, INFINITE);

    // Clean up
    VirtualFreeEx(hProcess, lpRemoteMem, 0, MEM_RELEASE);
    CloseHandle(hThread);
    CloseHandle(hProcess);

    return 0;
}
